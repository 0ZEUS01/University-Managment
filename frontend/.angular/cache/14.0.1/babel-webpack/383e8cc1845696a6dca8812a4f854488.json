{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/user-service/api/auth'; // Update with your gateway URL\n      // Predefined users\n\n      this.predefinedUsers = [{\n        username: 'AmalHida',\n        password: 'AmalHida',\n        role: 'STUDENT'\n      }, {\n        username: 'YahyaZini',\n        password: 'YahyaZini',\n        role: 'TEACHER'\n      }];\n      const storedUser = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    } // Client-side authentication for predefined users\n\n\n    signin(credentials) {\n      const matchedUser = this.predefinedUsers.find(user => user.username === credentials.username && user.password === credentials.password);\n\n      if (matchedUser) {\n        const authResponse = {\n          token: this.generateMockToken(),\n          username: matchedUser.username,\n          role: matchedUser.role,\n          userId: this.generateMockUserId(matchedUser.username)\n        };\n        this.handleAuthentication(authResponse);\n        return of(authResponse);\n      } // If no match, return an error\n\n\n      return of(null).pipe(map(() => {\n        throw new Error('Invalid credentials');\n      }));\n    }\n\n    signup(credentials) {\n      // Implement signup logic if needed\n      return this.http.post(`${this.apiUrl}/signup`, credentials).pipe(map(response => {\n        this.handleAuthentication(response);\n        return response;\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n\n    handleAuthentication(response) {\n      localStorage.setItem('currentUser', JSON.stringify(response));\n      this.currentUserSubject.next(response);\n    }\n\n    isAuthenticated() {\n      return !!this.currentUserValue;\n    }\n\n    getUserRole() {\n      var _a;\n\n      return ((_a = this.currentUserValue) === null || _a === void 0 ? void 0 : _a.role) || null;\n    }\n\n    validateToken(token) {\n      // Mock token validation\n      return of(true);\n    } // Generate a mock token (for client-side simulation)\n\n\n    generateMockToken() {\n      return 'mock_token_' + Math.random().toString(36).substring(2);\n    } // Generate a mock user ID\n\n\n    generateMockUserId(username) {\n      return username === 'AmalHida' ? 1 : username === 'YahyaZini' ? 2 : 0;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}